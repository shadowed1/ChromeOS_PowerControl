#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
INSTALL_DIR="@INSTALL_DIR@"
CONFIG_FILE="$INSTALL_DIR/config.sh"
BATTERY_PATH=""
STATUS_PATH=""
RUN_FLAG="$INSTALL_DIR/.batterycontrol_enabled"
PID_FILE="$INSTALL_DIR/.batterycontrol_pid"
LOG_FILE="/var/log/batterycontrol.log"

if ! ( [[ -z "$1" ]] || [[ "$1" == "--h" || "$1" == "-h" || "$1" == "h" || "$1" == "--help" || "$1" == "-help" || "$1" == "help" || "$1" == "monitor" || "$1" == "status" ]] ) && [[ "$(id -u)" -ne 0 ]]; then    
    echo "${RED}BatteryControl requires sudo to run.${RESET}"
    echo "  Try: sudo batterycontrol $*  or  sudo $0 $*"
    exit 1
fi

DEFAULT_CHARGE_MAX=77
CHARGE_MAX=

detect_battery() {
    for d in /sys/class/power_supply/*; do
        if [ -f "$d/capacity" ] && [ -f "$d/status" ]; then
            status=$(cat "$d/status")
            if [ "$status" != "Unknown" ]; then
                BATTERY_PATH="$d/capacity"
                STATUS_PATH="$d/status"
                return 0
            fi
        fi
    done

    echo "No usable battery detected!"
    BATTERY_PATH=""
    STATUS_PATH=""
    return 1
}

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
}

validate_config() {
    if [[ -z "$CHARGE_MAX" || ! "$CHARGE_MAX" =~ ^[0-9]+$ ]]; then
        CHARGE_MAX=$DEFAULT_CHARGE_MAX
    fi
    if (( CHARGE_MAX > 100 )); then
        CHARGE_MAX=100
    elif (( CHARGE_MAX < 14 )); then
        CHARGE_MAX=14
    fi
}

save_config() {
    validate_config
    sed -i "s/^CHARGE_MAX=.*/CHARGE_MAX=$CHARGE_MAX/" "$CONFIG_FILE" || echo "CHARGE_MAX=$CHARGE_MAX" >> "$CONFIG_FILE"
}

load_config

set_threshold() {
    if ! [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "Error: Threshold must be an integer."
        exit 1
    fi
    if (( $1 > 100 || $1 < 14 )); then
        echo "Error: CHARGE_MAX must be between 14 and 100."
        exit 1
    fi

    CHARGE_MAX=$1
    save_config
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Charge Limit: $CHARGE_MAX" | tee -a "$LOG_FILE"
}

load_config

show_help() {
echo "${GREEN}"
echo "╔════════════════════════════════════════════════════════════════════════════════════╗"
echo "║                                                                                    ║"
echo "║                       BatteryControl commands with examples:                       ║"
echo "║                                                                                    ║"
echo "║  batterycontrol               # Check BatteryControl status                        ║"
echo "║  sudo batterycontrol start    # Start BatteryControl                               ║"
echo "║  sudo batterycontrol stop     # Stop BatteryControl                                ║"
echo "║  sudo batterycontrol 77       # Charge limit set to 77% - Minimum allowed is 14%   ║"
echo "║  sudo batterycontrol startup  # Copy or Remove batterycontrol.conf at: /etc/init/  ║"
echo "║  sudo batterycontrol help     # Help menu                                          ║"
echo "║                                                                                    ║"
echo "╚════════════════════════════════════════════════════════════════════════════════════╝"
echo "${RESET}"
}

detect_active_usbpd_port() {
    local port_output
    port_output=$(sudo ectool usbpdpower 2>/dev/null)
    local line port

    while IFS= read -r line; do
        if [[ "$line" =~ ^Port[[:space:]]+([0-9]+):[[:space:]]+SNK[[:space:]]+Charger ]]; then
            port="${BASH_REMATCH[1]}"
            echo "$port"
            return
        fi
    done <<< "$port_output"

    echo "-1"
}

battery_status() {
    detect_battery || return 1

    if [ -f "$RUN_FLAG" ]; then
        if [ -f "$PID_FILE" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
echo "${GREEN}"
echo "═════════════════════════════════════════════════════════════════════════════"
echo "                BatteryControl is: RUNNING (PID $PID)"
            else
echo "${RED}"
echo "═════════════════════════════════════════════════════════════════════════════"
echo "              BatteryControl is: RUNNING (but process is NOT)         "
                rm -f "$PID_FILE"
            fi
        else
echo "${RED}"
echo "═════════════════════════════════════════════════════════════════════════════"
echo "                   BatteryControl is: RUNNING (PID not found)                       "
        fi
else
echo "${RED}"
echo "═════════════════════════════════════════════════════════════════════════════"
echo "                       BatteryControl is: STOPPED"
    fi
echo ""
echo "Charge Limit: $CHARGE_MAX"
echo ""
        local active_port
        active_port=$(detect_active_usbpd_port)
        if [ "$active_port" != "-1" ]; then

echo "Active USB-PD Charger Port: $active_port (CROS_USBPD_CHARGER$active_port)"
sudo ectool usbpdpower 2>/dev/null || echo "Failed to run ectool usbpdpower (is ectool installed and available?)"
echo
sudo ectool battery 2>/dev/null || echo "Failed to run ectool battery (is ectool installed and available?)"
echo "  Capacity: $BATTERY_PATH"
echo "  State:   $STATUS_PATH"
echo "═════════════════════════════════════════════════════════════════════════════"
echo ""
        else
echo "Active USB-PD Charger Port: None detected "
sudo ectool usbpdpower 2>/dev/null || echo "Failed to run ectool usbpdpower (is ectool installed and available?)"
echo
sudo ectool battery 2>/dev/null || echo "Failed to run ectool battery (is ectool installed and available?)"
echo "  Capacity: $BATTERY_PATH"
echo "  State:   $STATUS_PATH"
echo "═════════════════════════════════════════════════════════════════════════════"
echo "${RESET}"

    fi
}

start_monitoring_loop() {
    detect_battery || exit 1
    touch "$RUN_FLAG"
    echo $$ > "$PID_FILE"

    echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - BatteryControl started. (PID $$).${RESET}"

    local last_reload_time=0

    while true; do
        if [ ! -f "$RUN_FLAG" ]; then
            echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') - Stopping BatteryControl${RESET}." | tee -a "$LOG_FILE"
            rm -f "$PID_FILE"
            exit 0
        fi

        now=$(date +%s)
        if (( now - last_reload_time >= 30 )); then
            load_config
            last_reload_time=$now
            echo "${GREEN}$(cat "$BATTERY_PATH") -> $(cat "$STATUS_PATH")${RESET}" >> "$LOG_FILE"
        fi

        if [ -f "$BATTERY_PATH" ]; then
            CHARGE=$(cat "$BATTERY_PATH" 2>/dev/null)
        else
            sleep 10
            continue
        fi

        STATUS=$(cat "$STATUS_PATH" 2>/dev/null)
        if [[ "$STATUS" == "Charging" ]]; then
            ACTIVE_PORT=$(detect_active_usbpd_port)
        else
            ACTIVE_PORT="-1"
        fi

        if [ "$ACTIVE_PORT" != "-1" ]; then
            CHARGER_PATH="/sys/class/power_supply/CROS_USBPD_CHARGER${ACTIVE_PORT}/online"
            if [ -f "$CHARGER_PATH" ]; then
                AC_ON=$(cat "$CHARGER_PATH" 2>/dev/null)
            else
                AC_ON=0
            fi
        else
            AC_ON=0
        fi

        CHARGE_MIN=$((CHARGE_MAX-4))

         if [ "$AC_ON" -eq 1 ]; then
            if [ "$CHARGE" -ge "$CHARGE_MAX" ]; then
                sudo ectool chargecontrol idle >/dev/null 2>&1
            elif [ "$CHARGE" -le "$CHARGE_MIN" ]; then
                sudo ectool chargecontrol normal >/dev/null 2>&1
            fi
        else
            sudo ectool chargecontrol normal >/dev/null 2>&1
        fi

        sleep 10
    done
}

stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            kill "$PID"
            echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - Stopping BatteryControl (PID $PID)${RESET}" | tee -a "$LOG_FILE"
        fi
        rm -f "$PID_FILE"
    fi

    rm -f "$RUN_FLAG"
}

case "$1" in
    set)
        set_threshold "$2"
        ;;
    start)
        stop_monitoring >/dev/null 2>&1
        LOG_FILE="/var/log/batterycontrol.log"

        if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 32768 ]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Truncated log file (exceeded 32KB)" | tee -a "$LOG_FILE"
        fi

        nohup "$0" __monitor__ >> "$LOG_FILE" 2>&1 &
        echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - Starting BatteryControl - Output is logged to $LOG_FILE${RESET}" | tee -a "$LOG_FILE"
        ;;
    stop)
        stop_monitoring
        ;;
    ""|status)
        battery_status
        ;;
    startup)
        CONF_SOURCE="$INSTALL_DIR/batterycontrol.conf"
        CONF_TARGET="/etc/init/batterycontrol.conf"

        read -p "Do you want BatteryControl to startup automatically? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            if [ -f "$CONF_SOURCE" ]; then
                echo "Copying batterycontrol.conf to /etc/init/..."
                sudo cp "$CONF_SOURCE" "$CONF_TARGET"
                echo "${GREEN}batterycontrol.conf copied.${RESET}"
            else
                echo "${RED}batterycontrol.conf not found at $CONF_SOURCE${RESET}"
            fi
        else
            echo "BatteryControl will not startup automatically."
            sudo rm -r /etc/init/batterycontrol.conf
        fi
        ;;
   --h|-h|h|--help|-help|help)
        show_help
        ;;
    __monitor__)
        start_monitoring_loop
        ;;
    ''|*[!0-9]*)
        echo "Unknown command or value is too low: $1"
        echo "Use '$0 help' to see available commands."
        exit 1
        ;;
    monitor)
        tail -f /var/log/batterycontrol.log
        ;;
    *)
        if [[ "$1" =~ ^[0-9]+$ ]] && (( $1 >= 14 && $1 <= 100 )); then
            set_threshold "$1"
        else
            echo "${RED}Unknown command or value is too low: $1 ${RESET}"
            show_help
            exit 1
        fi
        ;;
esac
