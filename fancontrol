#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
INSTALL_DIR="@INSTALL_DIR@"
CONFIG_FILE="$INSTALL_DIR/config.sh"
ZONE_PATH="/sys/class/thermal/thermal_zone0/temp"
RUN_FLAG="$INSTALL_DIR/.fancontrol_running"
PID_FILE="$INSTALL_DIR/.fancontrol_pid"
LOG_FILE="/var/log/fancontrol.log"
MONITOR_PID_FILE="$INSTALL_DIR/.fancontrol_monitor.pid"

if ! ( [[ -z "$1" ]] || [[ "$1" == "--h" || "$1" == "-h" || "$1" == "h" || "$1" == "--help" || "$1" == "-help" || "$1" == "help" || "$1" == "status" ]] ) && [[ "$(id -u)" -ne 0 ]]; then    echo "${RED}FanControl requires sudo to run.${RESET}"
    echo "  Try: sudo fancontrol $*  or  sudo $0 $*"
    exit 1
fi

DEFAULT_FAN_MIN_TEMP=46
DEFAULT_FAN_MAX_TEMP=80
DEFAULT_MIN_FAN=0
DEFAULT_MAX_FAN=100  
DEFAULT_FAN_POLL=3
DEFAULT_STEP_UP=20
DEFAULT_STEP_DOWN=1

FAN_POLL=$DEFAULT_FAN_POLL
STEP_UP=$DEFAULT_STEP_UP
STEP_DOWN=$DEFAULT_STEP_DOWN
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
}

get_temp() {
    if [[ -r "$ZONE_PATH" ]]; then
        local raw_temp
        raw_temp=$(cat "$ZONE_PATH")
        if [[ "$raw_temp" =~ ^[0-9]+$ ]]; then
            echo $((raw_temp / 1000))
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}


validate_config() {
    if [[ -z "$MAX_FAN" || ! "$MAX_FAN" =~ ^[0-9]+$ ]]; then
        MAX_FAN=$DEFAULT_MAX_FAN
    fi
    if [[ -z "$MIN_FAN" || ! "$MIN_FAN" =~ ^[0-9]+$ ]]; then
        MIN_FAN=$DEFAULT_MIN_FAN
    fi
    if (( MIN_FAN >= MAX_FAN )); then
        MIN_FAN=$DEFAULT_MIN_FAN
        MAX_FAN=$DEFAULT_MAX_FAN
    fi

    if [[ -z "$FAN_MAX_TEMP" || ! "$FAN_MAX_TEMP" =~ ^[0-9]+$ ]]; then
        FAN_MAX_TEMP=$DEFAULT_FAN_MAX_TEMP
    fi
    if [[ -z "$FAN_MIN_TEMP" || ! "$FAN_MIN_TEMP" =~ ^[0-9]+$ ]]; then
        FAN_MIN_TEMP=$DEFAULT_FAN_MIN_TEMP
    fi
    if (( FAN_MIN_TEMP >= FAN_MAX_TEMP )); then
        FAN_MIN_TEMP=$DEFAULT_FAN_MIN_TEMP
        FAN_MAX_TEMP=$DEFAULT_FAN_MAX_TEMP
    fi

    if [[ -z "$STEP_UP" || ! "$STEP_UP" =~ ^[0-9]+$ ]]; then
        STEP_UP=$DEFAULT_STEP_UP
    fi
    if [[ -z "$STEP_DOWN" || ! "$STEP_DOWN" =~ ^[0-9]+$ ]]; then
        STEP_DOWN=$DEFAULT_STEP_DOWN
    fi
    if [[ -z "$FAN_POLL" || ! "$FAN_POLL" =~ ^[0-9]+$ ]]; then
        FAN_POLL=$DEFAULT_FAN_POLL
    fi
}

save_config() {
    sed -i "s/^FAN_MAX_TEMP=.*/FAN_MAX_TEMP=$FAN_MAX_TEMP/" "$CONFIG_FILE" || echo "FAN_MAX_TEMP=$FAN_MAX_TEMP" >> "$CONFIG_FILE"
    sed -i "s/^FAN_MIN_TEMP=.*/FAN_MIN_TEMP=$FAN_MIN_TEMP/" "$CONFIG_FILE" || echo "FAN_MIN_TEMP=$FAN_MIN_TEMP" >> "$CONFIG_FILE"
    sed -i "s/^MAX_FAN=.*/MAX_FAN=$MAX_FAN/" "$CONFIG_FILE" || echo "MAX_FAN=$MAX_FAN" >> "$CONFIG_FILE"
    sed -i "s/^MIN_FAN=.*/MIN_FAN=$MIN_FAN/" "$CONFIG_FILE" || echo "MIN_FAN=$MIN_FAN" >> "$CONFIG_FILE"
    sed -i "s/^FAN_POLL=.*/FAN_POLL=$FAN_POLL/" "$CONFIG_FILE" || echo "FAN_POLL=$FAN_POLL" >> "$CONFIG_FILE"
    sed -i "s/^STEP_UP=.*/STEP_UP=$STEP_UP/" "$CONFIG_FILE" || echo "STEP_UP=$STEP_UP" >> "$CONFIG_FILE"
    sed -i "s/^STEP_DOWN=.*/STEP_DOWN=$STEP_DOWN/" "$CONFIG_FILE" || echo "STEP_DOWN=$STEP_DOWN" >> "$CONFIG_FILE"
}

# === Fan logic with hysteresis ===
cleanup() {
    echo "${YELLOW} $(date '+%Y-%m-%d %H:%M:%S') - Restoring automatic fan control...${RESET}" | tee -a "$LOG_FILE"
    sudo ectool autofanctrl
    rm -f "$RUN_FLAG" "$PID_FILE"
    exit 0
}

run_loop() {
    RAW_TEMP=$(cat "$ZONE_PATH")
    TEMP_C=$((RAW_TEMP / 1000))
    prev_temp=$TEMP_C

if (( TEMP_C <= FAN_MIN_TEMP )); then
    initial_duty=$MIN_FAN
elif (( TEMP_C >= FAN_MAX_TEMP )); then
    initial_duty=$MAX_FAN
else
    RANGE=$((FAN_MAX_TEMP - FAN_MIN_TEMP))
    OFFSET=$((TEMP_C - FAN_MIN_TEMP))
    initial_duty=$((MIN_FAN + (OFFSET * (MAX_FAN - MIN_FAN) / RANGE)))
fi

sudo ectool fanduty "$initial_duty"

    echo "${GREEN} $(date '+%Y-%m-%d %H:%M:%S') - FanControl started.${RESET}" | tee -a "$LOG_FILE"
    prev_temp=$TEMP_C
    local last_duty=-1
    local last_reload_time=0

    while [ -f "$RUN_FLAG" ]; do
        if [ ! -f "$ZONE_PATH" ]; then
            echo "${RED} $(date '+%Y-%m-%d %H:%M:%S') - Thermal zone not found: $ZONE_PATH${RESET}" | tee -a "$LOG_FILE"
            cleanup
        fi

        now=$(date +%s)
        if (( now - last_reload_time >= 10 )); then
            load_config
            last_reload_time=$now
        fi

        RAW_TEMP=$(cat "$ZONE_PATH")
        TEMP_C=$((RAW_TEMP / 1000))
        TEMP_C=$(((TEMP_C + prev_temp) / 2))
        prev_temp=$TEMP_C

        if (( TEMP_C <= FAN_MIN_TEMP )); then
            DUTY=$MIN_FAN
        elif (( TEMP_C >= FAN_MAX_TEMP )); then
            DUTY=$MAX_FAN
        else
            RANGE=$((FAN_MAX_TEMP - FAN_MIN_TEMP))
            OFFSET=$((TEMP_C - FAN_MIN_TEMP))
            DUTY=$((MIN_FAN + (OFFSET * (MAX_FAN - MIN_FAN) / RANGE)))
        fi


        # Apply hysteresis / gradual ramping with asymmetric steps
        HYSTERESIS=2  # percent
             if (( last_duty < 50 )); then
                effective_step_down=$((STEP_DOWN / 2))
                (( effective_step_down < 1 )) && effective_step_down=1
            else
                effective_step_down=$STEP_DOWN
            fi

            if (( last_duty < 0 )); then
                target_duty=$DUTY
            elif (( DUTY > last_duty + HYSTERESIS )); then
                diff=$((DUTY - last_duty))
                if (( diff > STEP_UP )); then
                    target_duty=$((last_duty + STEP_UP))
                else
                    target_duty=$DUTY
                fi
            elif (( DUTY < last_duty - HYSTERESIS )); then
                diff=$((last_duty - DUTY))
                if (( diff > effective_step_down )); then
                    target_duty=$((last_duty - effective_step_down))
                else
                    target_duty=$DUTY
                fi
            else
                target_duty=$last_duty  # No change if within hysteresis
            fi



        echo "$(date '+%Y-%m-%d %H:%M:%S') CPU: ${TEMP_C}°C -> Fan: ${target_duty}%" >> "$LOG_FILE"

       if (( last_duty > 0 && target_duty == 0 )); then
            echo "Applying kickstart ramp-up before setting to 0%" >> "$LOG_FILE"
            for duty in 10 20 30 40; do
                echo "  - Kickstart: ${duty}%" >> "$LOG_FILE"
                sudo ectool fanduty "$duty" | grep -v "Fan duty cycle set for all fans." >> "$LOG_FILE"
                sleep 0.3
            done
            sudo ectool fanduty 0 | grep -v "Fan duty cycle set for all fans." >> "$LOG_FILE"
        else
            sudo ectool fanduty "$target_duty" | grep -v "Fan duty cycle set for all fans." >> "$LOG_FILE"
        fi

        if [[ -n "$prev_temp" ]]; then
            TEMP_C=$(((TEMP_C + prev_temp) / 2))
        fi
        prev_temp=$TEMP_C

        if (( DUTY < MIN_FAN )); then
            DUTY=$MIN_FAN
        elif (( DUTY > MAX_FAN )); then
            DUTY=$MAX_FAN
        fi

        last_duty=$target_duty

        sleep "$FAN_POLL"
    done

    cleanup
}

# === Start / Stop / Monitor ===
start() {
    "$0" stop >/dev/null 2>&1
    FAN_COUNT=$(sudo ectool pwmgetnumfans | awk -F= '{print $2}' | sed -e 's/ //g')
        if [[ "$FAN_COUNT" =~ ^[0-9]+$ ]] && (( FAN_COUNT == 0 )); then
            echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') - No fans detected (FAN_COUNT=0). Stopping.${RESET}" | tee -a "$LOG_FILE"
            exit 1
        fi

    LOG_FILE="/var/log/fancontrol.log"

    # Truncate if log exceeds 32KB
    if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 32768 ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Truncated log file (exceeded 32KB)" > "$LOG_FILE"
    fi

    if pgrep -f "[f]ancontrol __monitor__" >/dev/null; then
        echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - FanControl already running. Showing live output...${RESET}" | tee -a "$LOG_FILE"
        tail -n 10 -f "$LOG_FILE"
    else
        nohup "$0" __monitor__ >> "$LOG_FILE" 2>&1 &
        echo "${GREEN}$(date '+%Y-%m-%d %H:%M:%S') - Starting FanControl - Output is logged to $LOG_FILE${RESET}" | tee -a "$LOG_FILE"
    fi
}


stop() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - Stopping FanControl (PID $PID)...${RESET}" | tee -a "$LOG_FILE"
        rm -f "$RUN_FLAG"
        kill "$PID" 2>/dev/null
        sleep 1
    fi
    sudo ectool fanduty 50 | grep -v "Fan duty cycle set for all fans." >> "$LOG_FILE"
    sleep 1
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Restoring automatic fan control..." | tee -a "$LOG_FILE" | tee -a "$LOG_FILE"
    sudo ectool autofanctrl
    rm -f "$RUN_FLAG" "$PID_FILE"
}

monitor() {
    if [ -f "$MONITOR_PID_FILE" ]; then
        MONITOR_PID=$(cat "$MONITOR_PID_FILE")
        if ps -p "$MONITOR_PID" > /dev/null 2>&1; then
            echo "Stopping monitor (PID $MONITOR_PID)..."
            kill "$MONITOR_PID"
            rm -f "$MONITOR_PID_FILE"
            exit 0
        else
            rm -f "$MONITOR_PID_FILE"
        fi
    fi

    tail -fn +1 "$LOG_FILE" &
    echo $! > "$MONITOR_PID_FILE"
    echo "Monitor started (PID $!)"
}

fan_min_temp() {
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        load_config
        FAN_MIN_TEMP=$2
        save_config
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Min temp set to $FAN_MIN_TEMP°C" | tee -a "$LOG_FILE"
    else
        echo "Usage: $0 fan_min_temp <number>"
    fi
}

fan_max_temp() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 <= 90 )); then
        load_config
        FAN_MAX_TEMP=$2
        save_config
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Max temp set to $FAN_MAX_TEMP°C" | tee -a "$LOG_FILE"
    else
        echo "Usage: $0 fan_max_temp <number (<=90)>"
    fi
}

min_fan() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 0 && $2 <= 100 )); then
        load_config
        if (( MAX_FAN > $2 )); then
            MIN_FAN=$2
            save_config
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Min fan set to $MIN_FAN%" | tee -a "$LOG_FILE"
        else
            echo "Error: MIN_FAN must be less than MAX_FAN ($MAX_FAN)"
        fi
    else
        echo "Usage: $0 min_fan <0-100>"
    fi
}

max_fan() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 0 && $2 <= 100 )); then
        load_config
        if (( $2 > MIN_FAN )); then
            MAX_FAN=$2
            save_config
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Max fan set to $MAX_FAN%" | tee -a "$LOG_FILE"
        else
            echo "Error: MAX_FAN must be greater than MIN_FAN ($MIN_FAN)"
        fi
    else
        echo "Usage: $0 max_fan <0-100>"
    fi
}

set_fan_poll() {
    if [[ "$2" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        FAN_POLL=$(printf "%.2f" "$2")
        if (( $(awk "BEGIN {print ($FAN_POLL < 1.0)}") )); then
            echo "${RED}Warning: FAN_POLL below 1.0s, resetting to 1.0s${RESET}"
            FAN_POLL=1.0
        elif (( $(awk "BEGIN {print ($FAN_POLL > 10.0)}") )); then
            echo "${RED}Warning: FAN_POLL above 10s, resetting to 10s${RESET}"
            FAN_POLL=10
        fi
        sed -i "s/^FAN_POLL=.*/FAN_POLL=$FAN_POLL/" "$CONFIG_FILE"
        echo "${CYAN}FanControl polling rate set to $FAN_POLL seconds${RESET}"
    else
        echo "Error: FAN_POLL must be a number between 1.0 and 10.0 (e.g., 1.5, 3, 4.2)"
        exit 1
    fi
}

set_stepup() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 1 && $2 <= 100 )); then
        load_config
        STEP_UP=$2
        save_config
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Step-up size set to $STEP_UP%" | tee -a "$LOG_FILE"
    else
        echo "Usage: $0 step_up <step_size_percent (1-100)>"
    fi
}

set_stepdown() {
    if [[ "$2" =~ ^[0-9]+$ ]] && (( $2 >= 1 && $2 <= 100 )); then
        load_config
        STEP_DOWN=$2
        save_config
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Step-down size set to $STEP_DOWN%" | tee -a "$LOG_FILE"
    else
        echo "Usage: $0 step_down <step_size_percent (1-100)>"
    fi
}
show_help() {
echo "${YELLOW}"
echo "╔════════════════════════════════════════════════════════════════════════════════════╗"
echo "║                                                                                    ║"
echo "║                          FanControl commands with examples:                        ║"
echo "║                                                                                    ║"
echo "║  fancontrol                       # Show FanControl status                         ║"
echo "║  sudo fancontrol start            # Start FanControl                               ║"
echo "║  sudo fancontrol stop             # Stop FanControl                                ║"
echo "║  sudo fancontrol fan_min_temp 48  # Min temp threshold                             ║"
echo "║  sudo fancontrol fan_max_temp 81  # Max temp threshold - Limit is 90°C             ║"
echo "║  sudo fancontrol min_fan 0        # Min fan speed %                                ║"
echo "║  sudo fancontrol max_fan 100      # Max fan speed %                                ║"
echo "║  sudo fancontrol step_up 20       # Fan step-up %                                  ║"
echo "║  sudo fancontrol step_down 1      # Fan step-down %                                ║"
echo "║  sudo fancontrol poll 2           # FanControl polling rate in seconds (1 to 10s)  ║"
echo "║  sudo fancontrol monitor          # Toggle on/off live monitoring in terminal      ║"
echo "║  sudo fancontrol startup          # Copy or Remove fancontrol.conf at: /etc/init/  ║"
echo "║  sudo fancontrol help             # Help menu                                      ║"
echo "║                                                                                    ║"
echo "╚════════════════════════════════════════════════════════════════════════════════════╝"
echo "${RESET}"
}

case "$1" in
    start) start ;;
    stop) stop ;;
    monitor) monitor ;;
    fan_min_temp) fan_min_temp "$@" ;;
    fan_max_temp) fan_max_temp "$@" ;;
    min_fan)  min_fan "$@" ;;
    max_fan)  max_fan "$@" ;;
    poll | fan_poll)   set_fan_poll "$@" ;;
    step_up)   set_stepup "$@" ;;
    step_down) set_stepdown "$@" ;;
    startup)
        CONF_SOURCE="$INSTALL_DIR/fancontrol.conf"
        CONF_TARGET="/etc/init/fancontrol.conf"

        read -p "Do you want FanControl to startup automatically? (y/n): " choice
    if [[ "$choice" =~ ^[Yy]$ ]]; then
        if [ -f "$CONF_SOURCE" ]; then
            echo "Copying fancontrol.conf to /etc/init/..."
            sudo cp "$CONF_SOURCE" "$CONF_TARGET"
            echo "${GREEN}fancontrol.conf copied.${RESET}"
        else
            echo "${RED}fancontrol.conf not found at $CONF_SOURCE${RESET}"
        fi
    else
        echo "FanControl will not startup automatically."
        sudo rm -r /etc/init/fancontrol.conf
    fi
        ;;
    __monitor__)
        echo $$ > "$PID_FILE"
        touch "$RUN_FLAG"
        FAN_COUNT=$(sudo ectool pwmgetnumfans | awk -F= '{print $2}' | sed -e 's/ //g')
            if [[ "$FAN_COUNT" =~ ^[0-9]+$ ]] && (( FAN_COUNT == 0 )); then
                echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') - No fans detected (FAN_COUNT=0). Stopping monitor.${RESET}" | tee -a "$LOG_FILE"
                rm -f "$RUN_FLAG" "$PID_FILE"
                exit 1
            fi
        run_loop
        ;;
    ""|status)
        load_config
        if [ -f "$RUN_FLAG" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
echo "${YELLOW}"
echo "══════════════════════════════════════════════════════════"
echo "         FanControl Status: RUNNING (PID $PID)"
            else
echo "${RED}"
echo "══════════════════════════════════════════════════════════"
echo "  FanControl Status: RUN FLAG PRESENT, but not running   "
            fi
        else
            echo
echo "${RED}"
echo "══════════════════════════════════════════════════════════"
echo "                FanControl Status: STOPPED               "
        fi
echo ""
echo -n "  "; sudo ectool pwmgetnumfans
echo -n "  "; sudo ectool pwmgetfanrpm all
echo "  CPU temp: $(get_temp)°C"
echo "  Fan Curve: $FAN_MIN_TEMP°C = ${MIN_FAN}% RPM -> $FAN_MAX_TEMP°C = ${MAX_FAN}% RPM"
echo "  Polling rate: ${FAN_POLL}s"
echo "  Step-up: $STEP_UP%, Step-down: $STEP_DOWN%"
echo "══════════════════════════════════════════════════════════"
echo "${RESET}"
        ;;
    --h|-h|h|--help|-help|help) show_help ;;
    *) echo "Unknown command: $1"; show_help ;;
esac
