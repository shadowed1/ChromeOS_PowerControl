#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
LOG_FILE="/var/log/gpucontrol.log"
INSTALL_DIR="@INSTALL_DIR@"
CONFIG_FILE="$INSTALL_DIR/config.sh"
GPU_MAX_FREQ=
ORIGINAL_GPU_MAX_FREQ=

if ! ( [[ -z "$1" ]] || [[ "$1" =~ ^(-h|--h|h|--help|-help|help|status)$ ]] ) && [[ "$(id -u)" -ne 0 ]]; then
    echo "${RED}GPUControl requires sudo to run.${RESET}"
    echo "  Try: sudo gpucontrol $*  or  sudo $0 $*"
    exit 1
fi

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
}

validate_config() {
    if [[ -z "$GPU_MAX_FREQ" || ! "$GPU_MAX_FREQ" =~ ^[0-9]+$ ]]; then
        GPU_MAX_FREQ=$ORIGINAL_GPU_MAX_FREQ
    fi
    if (( GPU_MAX_FREQ > ORIGINAL_GPU_MAX_FREQ )); then
        GPU_MAX_FREQ=$ORIGINAL_GPU_MAX_FREQ
    fi
}

save_config() {
    validate_config
    if [[ -f "$CONFIG_FILE" ]]; then
        if grep -q "^GPU_MAX_FREQ=" "$CONFIG_FILE"; then
            sed -i "s/^GPU_MAX_FREQ=.*/GPU_MAX_FREQ=$GPU_MAX_FREQ/" "$CONFIG_FILE"
        else
            echo "GPU_MAX_FREQ=$GPU_MAX_FREQ" >> "$CONFIG_FILE"
        fi
    fi
}

if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
    load_config
else
    echo "${RED}Error: GPU config file missing. Please re-run the installer.${RESET}"
    exit 1
fi

if ! [[ "$ORIGINAL_GPU_MAX_FREQ" =~ ^[0-9]+$ ]]; then
    echo ""
    echo "${RED}Error: Could not verify original max GPU frequency. Aborting.${RESET}"
    echo ""
    exit 1
fi

amd_set_max_freq() {
    local requested_freq="$1"
    local pp_od_file="$PP_OD_FILE"

    if (( requested_freq > ORIGINAL_GPU_MAX_FREQ )); then
        echo "${RED}Error: Requested frequency ($requested_freq MHz) exceeds original maximum ($ORIGINAL_GPU_MAX_FREQ MHz).${RESET}"
        exit 1
    fi

    if [[ -z "$pp_od_file" || ! -w "$pp_od_file" ]]; then
        echo "${RED}Error: Cannot write to pp_od_clk_voltage. Is the path valid and writable?${RESET}"
        exit 1
    fi

    local states_raw
    states_raw=$(grep '^s ' "$pp_od_file")
    if [[ -z "$states_raw" ]]; then
        echo "${RED}Error: Could not read current pp_od_clk_voltage states.${RESET}"
        exit 1
    fi

    local target_index
    if [[ "$AMD_SELECTED_SCLK_INDEX" =~ ^[0-9]+$ ]]; then
        target_index="$AMD_SELECTED_SCLK_INDEX"
    else
        target_index=$(echo "$states_raw" | tail -n1 | awk '{print $2}')
    fi

    local new_cmd=""
    while read -r _ idx freq volt; do
        if [[ "$idx" == "$target_index" ]]; then
            freq="$requested_freq"
        fi
        new_cmd+="s $idx $freq $volt\n"
    done <<< "$states_raw"
    echo ""
    printf -v new_cmd_expanded "%b" "$new_cmd"
    echo -e "$new_cmd_expanded" | sudo tee "$pp_od_file" > /dev/null
    echo "c" | sudo tee "$pp_od_file" > /dev/null
    GPU_MAX_FREQ="$requested_freq"
    save_config
    echo ""
}

get_current_freq() {
    case "$1" in
        intel|mali|adreno)
            [[ -f "$GPU_FREQ_PATH" ]] && cat "$GPU_FREQ_PATH" || echo "Unavailable"
            ;;
        amd)
            [[ -f "$GPU_FREQ_PATH" ]] && grep '*' "$GPU_FREQ_PATH" | awk '{print $2}' || echo "Unavailable"
            ;;
        *)
            echo ""
            echo "Unsupported GPU type"
            echo ""
            ;;
    esac
}

help() {
    echo "${MAGENTA}"
    echo "╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗"
    echo "║                                                                                                                  ║"
    echo "║                                         GPUControl commands with examples:                                       ║"
    echo "║                                                                                                                  ║"
    echo "║  gpucontrol                     # Show current GPU info and frequency                                            ║"
    echo "║  gpucontrol help                # Show help menu                                                            ║"
    echo "║  sudo gpucontrol restore        # Restore GPU max frequency to original value                                    ║"
    echo "║  sudo gpucontrol 800            # Set GPU max frequency to 800 MHz                                               ║"
    echo "║  sudo gpucontrol startup        # Enable or disable GPUControl on startup                                        ║"
    echo "║                                                                                                                  ║"
    echo "╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝"
    echo "${RESET}"
}

case "$1" in
    --h|-h|h|--help|-help|help)
        help
        exit 0
        ;;
    restore)
        echo "${MAGENTA}Restoring GPU to original max frequency...${RESET}"
        case "$GPU_TYPE" in
            intel|adreno|mali)
                [[ -w "$GPU_FREQ_PATH" ]] && echo "$ORIGINAL_GPU_MAX_FREQ" | sudo tee "$GPU_FREQ_PATH" > /dev/null
                ;;
            amd)
                amd_set_max_freq "$ORIGINAL_GPU_MAX_FREQ"
                ;;
            *)
                echo "${RED}Restore not supported for GPU type: $GPU_TYPE${RESET}"
                exit 1
                ;;
        esac
        echo ""
        echo "${MAGENTA}GPU frequency restored to original: $ORIGINAL_GPU_MAX_FREQ${RESET}"
        echo ""
        exit 0
        ;;
    startup)
        CONF_SOURCE="$INSTALL_DIR/gpucontrol.conf"
        CONF_TARGET="/etc/init/gpucontrol.conf"
        read -p "Enable GPUControl on startup? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            sudo cp "$CONF_SOURCE" "$CONF_TARGET" && echo "${MAGENTA}Startup enabled.${RESET}"
        else
            sudo rm -f "$CONF_TARGET" && echo "${RED}Startup disabled.${RESET}"
        fi
        exit 0
        ;;
esac

if [[ $# -eq 0 ]]; then
    case "$GPU_TYPE" in
        amd) amd_set_max_freq "$GPU_MAX_FREQ" ;;
        intel)
            echo "$GPU_MAX_FREQ" | sudo tee "$GPU_FREQ_PATH" > /dev/null
            ;;
        mali|adreno)
            echo "$GPU_MAX_FREQ" | sudo tee "$GPU_FREQ_PATH" > /dev/null
            ;;
    esac

    echo "${MAGENTA}"
    echo "═══════════════════════════════════════════════════"
    CURRENT_FREQ=$(get_current_freq "$GPU_TYPE")
    if [[ "$CURRENT_FREQ" =~ ^[0-9]+$ ]]; then
    case "$GPU_TYPE" in
        intel|amd)
            DISPLAY_FREQ="$CURRENT_FREQ" ;;
        mali|adreno)
            DISPLAY_FREQ=$((CURRENT_FREQ / 1000000)) ;;
        *)
            DISPLAY_FREQ="$CURRENT_FREQ" ;;
    esac
    echo -n "GPUControl Max Frequency: ${RESET}${BOLD}${MAGENTA}${DISPLAY_FREQ} MHz"
else
    echo -n "GPUControl Max Frequency: ${RESET}${BOLD}${MAGENTA}Unavailable"
fi

    echo "${RESET}${MAGENTA}"
    echo "GPU Type: $GPU_TYPE"
    if [[ "$GPU_TYPE" == "intel" || "$GPU_TYPE" == "amd" ]]; then
        DEFAULT_MHZ=$ORIGINAL_GPU_MAX_FREQ
    else
        DEFAULT_MHZ=$((ORIGINAL_GPU_MAX_FREQ / 1000000))
    fi
    echo "Default Max Frequency: ${DEFAULT_MHZ} MHz"
    echo "═══════════════════════════════════════════════════"
    echo "${RESET}"

    if [[ "$GPU_TYPE" == "amd" && -f "$PP_OD_FILE" ]]; then
        echo "${MAGENTA}Available AMD SCLK States:${RESET}"
        grep -i '^sclk' "$PP_OD_FILE" | nl -v0 | while read -r index line; do
            freq=$(echo "$line" | sed -n 's/.*[[:space:]]\([0-9]\{2,\}\)[[:space:]]*[Mm][Hh][Zz].*/\1/p')
            marker=""
            [[ "$index" -eq "$AMD_SELECTED_SCLK_INDEX" ]] && marker="${MAGENTA}<-- SELECTED${RESET}"
            printf "║ Index %2d: %s MHz %s\n" "$index" "$freq" "$marker"
        done
    fi
    exit 0
fi

if [[ $# -eq 1 && "$1" =~ ^[0-9]+$ ]]; then
    REQUESTED_FREQ="$1"
    GPU_ARG="$GPU_TYPE"
elif [[ $# -eq 2 && "$1" =~ ^[a-zA-Z]+$ && "$2" =~ ^[0-9]+$ ]]; then
    GPU_ARG=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    REQUESTED_FREQ="$2"

    if [[ "$GPU_ARG" != "$GPU_TYPE" ]]; then
        echo ""
        echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Error: GPU type '$GPU_ARG' does not match detected type '$GPU_TYPE'.${RESET}"
        echo ""
        exit 1
    fi
else
    echo ""
    echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Invalid arguments.${RESET}"
    help
    exit 1
fi

if ! [[ "$REQUESTED_FREQ" =~ ^[0-9]+$ ]]; then
    echo ""
    echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Error: Frequency must be a whole number.${RESET}"
    echo ""
    help
    exit 1
fi

case "$GPU_ARG" in
    intel)
        if (( REQUESTED_FREQ > ORIGINAL_GPU_MAX_FREQ )); then
            echo ""
            echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Error: Requested frequency (${REQUESTED_FREQ} MHz) exceeds original maximum (${ORIGINAL_GPU_MAX_FREQ} MHz).${RESET}"
            echo ""
            exit 1
        fi

        echo ""
        echo "$REQUESTED_FREQ" | sudo tee "$GPU_FREQ_PATH" > /dev/null
        DISPLAY_FREQ="$REQUESTED_FREQ"
        echo "${MAGENTA}$(date '+%Y-%m-%d %H:%M:%S') Intel GPU frequency set to $DISPLAY_FREQ MHz${RESET}" | tee -a "$LOG_FILE"
        echo ""
        GPU_MAX_FREQ="$REQUESTED_FREQ"
        save_config
        ;;
    mali|adreno)
        freq_hz=
        if (( REQUESTED_FREQ < 10000 )); then
            freq_hz=$((REQUESTED_FREQ * 1000000))
        else
            freq_hz="$REQUESTED_FREQ"
        fi

        if (( freq_hz > ORIGINAL_GPU_MAX_FREQ )); then
            echo ""
            echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Error: Requested frequency (${freq_hz} Hz) exceeds original maximum (${ORIGINAL_GPU_MAX_FREQ} Hz).${RESET}"
            echo ""
            exit 1
        fi

        echo ""
        echo "$freq_hz" | sudo tee "$GPU_FREQ_PATH" > /dev/null
        DISPLAY_FREQ=$((freq_hz / 1000000))
        echo "${MAGENTA}$(date '+%Y-%m-%d %H:%M:%S') $GPU_ARG GPU frequency set to $DISPLAY_FREQ MHz${RESET}" | tee -a "$LOG_FILE"
        GPU_MAX_FREQ="$freq_hz"
        echo ""
        save_config
        ;;
    amd)
        if (( REQUESTED_FREQ > ORIGINAL_GPU_MAX_FREQ )); then
            echo ""
            echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Error: Requested frequency (${REQUESTED_FREQ} MHz) exceeds original maximum (${ORIGINAL_GPU_MAX_FREQ} MHz).${RESET}"
            echo ""
            exit 1
        fi

        amd_set_max_freq "$REQUESTED_FREQ"
        echo "${MAGENTA}$(date '+%Y-%m-%d %H:%M:%S') AMD GPU frequency set to $REQUESTED_FREQ MHz${RESET}" | tee -a "$LOG_FILE"
        echo ""
        ;;
    *)
        echo ""
        echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') Unsupported GPU type '$GPU_ARG'.${RESET}"
        echo ""
        help
        exit 1
        ;;
esac

exit 0
