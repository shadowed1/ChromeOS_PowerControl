#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
INSTALL_DIR="@INSTALL_DIR@"
CONFIG_FILE="$INSTALL_DIR/config.sh"
PID_FILE="$INSTALL_DIR/.sleepcontrol_pid"
RUN_FLAG="$INSTALL_DIR/.sleepcontrol_enabled"
LOG_FILE="/var/log/sleepcontrol.log"
BATTERY_STATUS_PATH="/var/log/power_manager/powerd.LATEST"
BACKLIGHT_NAME=""
BRIGHTNESS_PATH=""
MAX_BRIGHTNESS_PATH=""
FAKE_ACTIVITY_INTERVAL=30
LID_SUSPEND_IGNORE_UNTIL=0

SUSPEND_APPLIED_FLAG="/tmp/.sleepcontrol_suspend_applied"

if [[ ! -f "$SUSPEND_APPLIED_FLAG" ]]; then
    INSTALL_DIR="$(dirname "$(readlink -f "$0")")"
    CONFIG_FILE="$INSTALL_DIR/config.sh"

    if [[ -f "$CONFIG_FILE" ]]; then
        SUSPEND_MODE=$(grep "^SUSPEND_MODE=" "$CONFIG_FILE" | cut -d'=' -f2)
        if [[ "$SUSPEND_MODE" == "freeze" || "$SUSPEND_MODE" == "deep" ]]; then
            echo "$SUSPEND_MODE" | sudo tee /usr/share/power_manager/suspend_mode >/dev/null
            sudo restart powerd >/dev/null

            if [[ "$SUSPEND_MODE" == "freeze" ]]; then
                echo s2idle | sudo tee /sys/power/mem_sleep >/dev/null
            else
                echo deep | sudo tee /sys/power/mem_sleep >/dev/null
            fi

            touch "$SUSPEND_APPLIED_FLAG"
        fi
    fi
fi


get_battery_info() {
    local line
    line=$(grep -E "On (battery|AC)|line_power (connected|online)" "$BATTERY_STATUS_PATH" | tail -n1)

    if [[ "$line" =~ On\ battery\ at\ ([0-9]+)% ]]; then
        CHARGE="${BASH_REMATCH[1]}"
        STATUS="Discharging"

    elif [[ "$line" =~ On\ AC ]]; then
        if [[ "$line" =~ battery\ at\ ([0-9]+)% ]]; then
            CHARGE="${BASH_REMATCH[1]}"
        else
            CHARGE=""
        fi
        STATUS="Charging"

    elif [[ "$line" == *"line_power connected"* || "$line" == *"line_power online"* ]]; then
        if [[ "$line" =~ at\ ([0-9]+)% ]]; then
            CHARGE="${BASH_REMATCH[1]}"
        else
            CHARGE=""
        fi
        STATUS="Charging"

    else
        CHARGE=""
        STATUS="Unknown"
    fi
}


if ! ( [[ -z "$1" ]] || [[ "$1" == "--h" || "$1" == "-h" || "$1" == "h" || "$1" == "--help" || "$1" == "-help" || "$1" == "help" || "$1" == "help_all" || "$1" == "monitor" || "$1" == "powerd" || "$1" == "status" ]] ) && [[ "$(id -u)" -ne 0 ]]; then    echo "${RED}SleepControl requires sudo to run.${RESET}"
    echo "  Try: sudo sleepcontrol $*  or  sudo $0 $*"
    exit 1
fi

DEFAULT_BATTERY_DELAY=13
DEFAULT_BATTERY_BACKLIGHT=10
DEFAULT_BATTERY_DIM_DELAY=7
DEFAULT_POWER_DELAY=24
DEFAULT_POWER_BACKLIGHT=18
DEFAULT_POWER_DIM_DELAY=12
DEFAULT_SUSPEND_MODE=deep
DEFAULT_AUDIO_DETECTION_BATTERY=1
DEFAULT_AUDIO_DETECTION_POWER=1
DEFAULT_LIDSLEEP_BATTERY=1
DEFAULT_LIDSLEEP_POWER=1


AUDIO_DETECTION_BATTERY=
AUDIO_DETECTION_POWER=
BATTERY_DELAY=
BATTERY_BACKLIGHT=
BATTERY_DIM_DELAY=
POWER_DELAY=
POWER_BACKLIGHT=
POWER_DIM_DELAY=
SUSPEND_MODE=
ORIGINAL_SUSPEND_MODE=
LIDSLEEP_BATTERY=
LIDSLEEP_POWER=
audio_active=0
saved_display_brightness=0
was_dimmed=0

BATTERY_DELAY=$DEFAULT_BATTERY_DELAY
POWER_DELAY=$DEFAULT_POWER_DELAY
BATTERY_BACKLIGHT=$DEFAULT_BATTERY_BACKLIGHT
POWER_BACKLIGHT=$DEFAULT_POWER_BACKLIGHT
BATTERY_DIM_DELAY=$DEFAULT_BATTERY_DIM_DELAY
POWER_DIM_DELAY=$DEFAULT_POWER_DIM_DELAY
SUSPEND_MODE=$DEFAULT_SUSPEND_MODE
ORIGINAL_SUSPEND_MODE=$ORIGINAL_SUSPEND_MODE

load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
    validate_config
    recalc_timers
}

recalc_timers() {
    if [[ "$STATUS" == "Discharging" ]]; then
        dim_delay=$((BATTERY_DIM_DELAY * 60))
        backlight_delay=$((BATTERY_BACKLIGHT * 60))
        suspend_delay=$((BATTERY_DELAY * 60))
        AUDIO_DETECTION_ENABLED=$AUDIO_DETECTION_BATTERY
        LIDSLEEP_ENABLED=$LIDSLEEP_BATTERY
    else
        dim_delay=$((POWER_DIM_DELAY * 60))
        backlight_delay=$((POWER_BACKLIGHT * 60))
        suspend_delay=$((POWER_DELAY * 60))
        AUDIO_DETECTION_ENABLED=$AUDIO_DETECTION_POWER
        LIDSLEEP_ENABLED=$LIDSLEEP_POWER
    fi    
}

validate_config() {
    if [[ -z "$BATTERY_DELAY" || ! "$BATTERY_DELAY" =~ ^[0-9]+$ ]]; then
        BATTERY_DELAY=$DEFAULT_BATTERY_DELAY
    fi
    if [[ -z "$POWER_DELAY" || ! "$POWER_DELAY" =~ ^[0-9]+$ ]]; then
        POWER_DELAY=$DEFAULT_POWER_DELAY
    fi
    if [[ -z "$BATTERY_BACKLIGHT" || ! "$BATTERY_BACKLIGHT" =~ ^[0-9]+$ ]]; then
        BATTERY_BACKLIGHT=$DEFAULT_BATTERY_BACKLIGHT
    fi
    if [[ -z "$POWER_BACKLIGHT" || ! "$POWER_BACKLIGHT" =~ ^[0-9]+$ ]]; then
        POWER_BACKLIGHT=$DEFAULT_POWER_BACKLIGHT
    fi
    if [[ -z "$BATTERY_DIM_DELAY" || ! "$BATTERY_DIM_DELAY" =~ ^[0-9]+$ ]]; then
        BATTERY_DIM_DELAY=$DEFAULT_BATTERY_DIM_DELAY
    fi
    if [[ -z "$POWER_DIM_DELAY" || ! "$POWER_DIM_DELAY" =~ ^[0-9]+$ ]]; then
        POWER_DIM_DELAY=$DEFAULT_POWER_DIM_DELAY
    fi

    if [[ -z "$AUDIO_DETECTION_BATTERY" || ! "$AUDIO_DETECTION_BATTERY" =~ ^[01]$ ]]; then
        AUDIO_DETECTION_BATTERY=1
    fi
    if [[ -z "$AUDIO_DETECTION_POWER" || ! "$AUDIO_DETECTION_POWER" =~ ^[01]$ ]]; then
        AUDIO_DETECTION_POWER=1
    fi

    if [[ -z "$LIDSLEEP_BATTERY" || ! "$LIDSLEEP_BATTERY" =~ ^[01]$ ]]; then
        LIDSLEEP_BATTERY=$DEFAULT_LIDSLEEP_BATTERY
    fi
    if [[ -z "$LIDSLEEP_POWER" || ! "$LIDSLEEP_POWER" =~ ^[01]$ ]]; then
        LIDSLEEP_POWER=$DEFAULT_LIDSLEEP_POWER
    fi


    if [[ -z "$SUSPEND_MODE" || ( "$SUSPEND_MODE" != "freeze" && "$SUSPEND_MODE" != "deep" ) ]]; then
        if [[ -f "/usr/share/power_manager/suspend_mode" ]]; then
            SUSPEND_MODE=$(cat /usr/share/power_manager/suspend_mode)
            if [[ "$SUSPEND_MODE" != "freeze" && "$SUSPEND_MODE" != "deep" ]]; then
                SUSPEND_MODE="freeze"
            fi
        else
            SUSPEND_MODE="freeze"
        fi
    fi
}


save_config() {
    validate_config
    sed -i "s/^BATTERY_DELAY=.*/BATTERY_DELAY=$BATTERY_DELAY/" "$CONFIG_FILE" || echo "BATTERY_DELAY=$BATTERY_DELAY" >> "$CONFIG_FILE"
    sed -i "s/^POWER_DELAY=.*/POWER_DELAY=$POWER_DELAY/" "$CONFIG_FILE" || echo "POWER_DELAY=$POWER_DELAY" >> "$CONFIG_FILE"
    sed -i "s/^BATTERY_BACKLIGHT=.*/BATTERY_BACKLIGHT=$BATTERY_BACKLIGHT/" "$CONFIG_FILE" || echo "BATTERY_BACKLIGHT=$BATTERY_BACKLIGHT" >> "$CONFIG_FILE"
    sed -i "s/^POWER_BACKLIGHT=.*/POWER_BACKLIGHT=$POWER_BACKLIGHT/" "$CONFIG_FILE" || echo "POWER_BACKLIGHT=$POWER_BACKLIGHT" >> "$CONFIG_FILE"
    sed -i "s/^BATTERY_DIM_DELAY=.*/BATTERY_DIM_DELAY=$BATTERY_DIM_DELAY/" "$CONFIG_FILE" || echo "BATTERY_DIM_DELAY=$BATTERY_DIM_DELAY" >> "$CONFIG_FILE"
    sed -i "s/^POWER_DIM_DELAY=.*/POWER_DIM_DELAY=$POWER_DIM_DELAY/" "$CONFIG_FILE" || echo "POWER_DIM_DELAY=$POWER_DIM_DELAY" >> "$CONFIG_FILE"
    sed -i "s/^AUDIO_DETECTION_BATTERY=.*/AUDIO_DETECTION_BATTERY=$AUDIO_DETECTION_BATTERY/" "$CONFIG_FILE" || echo "AUDIO_DETECTION_BATTERY=$AUDIO_DETECTION_BATTERY" >> "$CONFIG_FILE"
    sed -i "s/^AUDIO_DETECTION_POWER=.*/AUDIO_DETECTION_POWER=$AUDIO_DETECTION_POWER/" "$CONFIG_FILE" || echo "AUDIO_DETECTION_POWER=$AUDIO_DETECTION_POWER" >> "$CONFIG_FILE"
    sed -i "s/^SUSPEND_MODE=.*/SUSPEND_MODE=$SUSPEND_MODE/" "$CONFIG_FILE" || echo "SUSPEND_MODE=$SUSPEND_MODE" >> "$CONFIG_FILE"
    sed -i "s/^ORIGINAL_SUSPEND_MODE=.*/ORIGINAL_SUSPEND_MODE=$ORIGINAL_SUSPEND_MODE/" "$CONFIG_FILE" || echo "ORIGINAL_SUSPEND_MODE=$ORIGINAL_SUSPEND_MODE" >> "$CONFIG_FILE"
    sed -i "s/^LIDSLEEP_BATTERY=.*/LIDSLEEP_BATTERY=$LIDSLEEP_BATTERY/" "$CONFIG_FILE" || echo "LIDSLEEP_BATTERY=$LIDSLEEP_BATTERY" >> "$CONFIG_FILE"
    sed -i "s/^LIDSLEEP_POWER=.*/LIDSLEEP_POWER=$LIDSLEEP_POWER/" "$CONFIG_FILE" || echo "LIDSLEEP_POWER=$LIDSLEEP_POWER" >> "$CONFIG_FILE"

}

show_help() {
echo "${BLUE}"
echo "╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗"
echo "║                                                                                                                    ║"
echo "║                                          SleepControl commands with examples:                                      ║"
echo "║                                                                                                                    ║"
echo "║  sleepcontrol                       # Show SleepControl status                                                     ║"
echo "║  sleepcontrol help                  # Help menu                                                                    ║"
echo "║  sleepcontrol monitor               # Monitor sleepcontrol activity in realtime (ctrl-c to exit)                   ║"
echo "║  sleepcontrol powerd                # Monitor powerd.LATEST log in realtime (ctrl-c to exit)                       ║"
echo "║  sudo sleepcontrol start            # Start SleepControl                                                           ║"
echo "║  sudo sleepcontrol stop             # Stop SleepControl                                                            ║"
echo "║  sudo sleepcontrol battery 3 7 12   # When idle, display dims in 3m -> timeout in 7m -> sleeps in 12m on battery   ║"
echo "║  sudo sleepcontrol power 5 15 30    # When idle, display dims in 5m -> timeout -> 15m -> sleeps in 30m plugged-in  ║"
echo "║  sudo sleepcontrol battery audio 0  # Disable audio detection on battery; sleep can occur during media playback    ║"
echo "║  sudo sleepcontrol power audio 1    # Enable audio detection on power; delaying sleep until audio is stopped       ║"
echo "║  sudo sleepcontrol mode deep        # Change suspend mode to freeze, enabling batterycontrol to work asleep        ║"
echo "║  sudo sleepcontrol lid power 0      # Prevent closing lid from putting system to sleep when on power               ║"
echo "║  sudo sleepcontrol lid battery 0    # Prevent closing lid from putting system to sleep when on battery             ║"
echo "║  sudo sleepcontrol startup          # Copy or Remove sleepcontrol.conf at: /etc/init/                              ║"
echo "║                                                                                                                    ║"
echo "╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝"
echo "${RESET}"
            }

load_config

set_display_brightness() {
    local value=$1
    if [[ -n "$BRIGHTNESS_PATH" ]]; then
        echo "$value" | sudo tee "$BRIGHTNESS_PATH" >/dev/null
    fi
    }

save_current_brightness() {
    if [[ $was_dimmed -eq 0 ]]; then
        if [[ -f "$BRIGHTNESS_PATH" ]]; then
            if read -r saved_display_brightness < "$BRIGHTNESS_PATH"; then
                :
            else
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Could not read brightness from $BRIGHTNESS_PATH" >> "$LOG_FILE"
            fi
        else
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Could not save brightness: $BRIGHTNESS_PATH not found" >> "$LOG_FILE"
        fi
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Skipping because display is dimmed." >> "$LOG_FILE"
    fi
}



   set_audio_detection() {
    local mode=$1
    local value=$2
    load_config
    if [[ "$value" =~ ^[01]$ ]]; then
        if [[ "$mode" == "battery" ]]; then
            AUDIO_DETECTION_BATTERY=$value
        else
            AUDIO_DETECTION_POWER=$value
        fi
        save_config
        echo "${BLUE}Audio detection for $mode set to $value${RESET}"
    else
        echo "Usage: $0 $mode audio <0|1>"
    fi
}

idle_elapsed=0

send_fake_activity() {
    dbus-send --system --type=method_call \
        --dest=org.chromium.PowerManager \
        /org/chromium/PowerManager \
        org.chromium.PowerManager.HandleUserActivity int32:0 int32:0
    echo "$(date '+%Y-%m-%d %H:%M:%S') - Simulated user activity." >> "$LOG_FILE"
}

monitor_idle_activity() {
    exec 200>"$PID_FILE.lock"
    flock -n 200 || {
        echo "${BLUE}"
        echo " SleepControl is already running."
        echo "${RESET}"
        exit 1
    }
    
    if pgrep -f "$0 __sleepcontrol_monitor__" | grep -v "^$$\$" > /dev/null; then
        exit 0
    fi

    echo "$BASHPID" > "$PID_FILE"
    touch "$RUN_FLAG"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - SleepControl started (PID $$)." > "$LOG_FILE"

    local active=1
    local monitor_idle=0
    local sending_fake_activity=0
    local fake_activity_pid=0
    local idle_since=0
    local backlight_off=0
    local kb_brightness_restored=1
    local power_backlight_ts=$(date +%s)
    local battery_backlight_ts=$(date +%s)
    local last_reload_time=0
    local last_power_check_time=0
    local saved_kb_brightness=$(sudo ectool pwmgetkblight 2>/dev/null | awk '{print $NF}')

    save_current_brightness

    start_fake_activity() {
    if (( sending_fake_activity == 0 )); then
        (
            while [ -f "$RUN_FLAG" ]; do
                sleep "$FAKE_ACTIVITY_INTERVAL"
                if send_fake_activity; then
                    last_fake_ts=$(date +%s)
                    echo "$(date '+%Y-%m-%d %H:%M:%S') - Fake activity sent." >> "$LOG_FILE"
                else
                    echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: Failed to send fake activity." >> "$LOG_FILE"
                fi
            done
        ) &
        fake_activity_pid=$!
        sending_fake_activity=1
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting simulated activity loop (PID $fake_activity_pid)." >> "$LOG_FILE"
    fi
}



   stop_fake_activity() {
    if (( sending_fake_activity == 1 )); then
        if kill -0 "$fake_activity_pid" 2>/dev/null; then
            kill "$fake_activity_pid" 2>/dev/null
            wait "$fake_activity_pid" 2>/dev/null
        fi
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Stopping simulated activity loop (PID $fake_activity_pid)." >> "$LOG_FILE"
        sending_fake_activity=0
        fake_activity_pid=0
    fi
}

    exec 3< <(tail -Fn0 /var/log/power_manager/powerd.LATEST)
    while read -r line <&3; do
        now=$(date +%s)

        (( now - last_reload_time >= 10 )) && { load_config; last_reload_time=$now; }

        if (( now - last_power_check_time >= 10 )); then
            get_battery_info
            [[ -z "$STATUS" ]] && { STATUS="Unknown"; CHARGE=""; }
        
            # Only act if discharging
            if [[ "$STATUS" == "Discharging" ]]; then
                for file in \
                    /var/lib/power_manager/disable_dark_resume \
                    /usr/share/power_manager/disable_dark_resume \
                    /mnt/stateful_partition/encrypted/var/lib/power_manager/disable_dark_resume; do
                    [[ -f "$file" ]] && echo 0 | sudo tee "$file" >/dev/null
                done
            fi
        
            last_power_check_time=$now
        fi


        AUDIO_DETECTION_ENABLED=$(( STATUS == "Discharging" ? AUDIO_DETECTION_BATTERY : AUDIO_DETECTION_POWER ))
        (( AUDIO_DETECTION_ENABLED == 0 )) && audio_active=0

        case "$line" in
        *"Chrome is using presentation display mode"*)
            PRESENTATION_MODE=1
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Presentation mode detected." >> "$LOG_FILE"
            stop_fake_activity
            ;;
        *"Chrome is using normal display mode"*)
            PRESENTATION_MODE=0
            # echo "$(date '+%Y-%m-%d %H:%M:%S') - Normal display mode detected." >> "$LOG_FILE"
            ;;
        *"Audio activity started"*|*"Audio activity ongoing"*)
            (( AUDIO_DETECTION_ENABLED == 1 )) && audio_active=1
            ;;
        *"Audio activity stopped"*)
            (( AUDIO_DETECTION_ENABLED == 1 )) && audio_active=0
            ;;
        *"User activity stopped"*)
            if (( audio_active == 0 )); then
                monitor_idle=1
                active=0
                kb_brightness_restored=0
                idle_since=$now
                last_ts=$now
                stop_fake_activity
            fi
            ;;
        *"Lid closed"*)
            lid_closed=1
            if (( PRESENTATION_MODE == 1 )); then
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Lid close ignored (presentation mode)." >> "$LOG_FILE"
                stop_fake_activity
            elif (( LIDSLEEP_ENABLED == 1 )); then
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Lid closed; relying on ChromeOS suspend." >> "$LOG_FILE"
                stop_fake_activity
            else
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Lid closed, lid sleep off." >> "$LOG_FILE"
            fi
            ;;
        *"Lid opened"*)
            if (( PRESENTATION_MODE == 0 )); then
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Lid opened, restoring brightness." >> "$LOG_FILE"
                if [[ -n "$saved_display_brightness" && "$saved_display_brightness" -gt 0 ]]; then
                    echo "$saved_display_brightness" | sudo tee "$BRIGHTNESS_PATH" >/dev/null
                fi
                # sudo ectool pwmsetkblight "$saved_kb_brightness" 2>/dev/null
            fi
            ;;
        *"On battery at"*)
            if [[ "$STATUS" != "Discharging" ]]; then
                STATUS="Discharging"
                dim_delay=$((BATTERY_DIM_DELAY*60))
                backlight_delay=$((BATTERY_BACKLIGHT*60))
                suspend_delay=$((BATTERY_DELAY*60))
            fi
            ;;
        *"On AC"*)
            if [[ "$STATUS" != "Charging" ]]; then
                STATUS="Charging"
                dim_delay=$((POWER_DIM_DELAY*60))
                backlight_delay=$((POWER_BACKLIGHT*60))
                suspend_delay=$((POWER_DELAY*60))
            fi
            ;;
        *"User activity reported"*|*"Enabling wakeup for"*|*"User triggered wake"*|*"powerd_suspend returned 0"*|*"User activity ongoing"*|*"Configuring devices for mode"*)
            if (( monitor_idle == 1 )); then
                if (( now - last_fake_ts > 2 )); then
                    echo "$(date '+%Y-%m-%d %H:%M:%S') - User activity resumed." >> "$LOG_FILE"
                fi
            fi
            if (( now - last_fake_ts > 2 )); then
                monitor_idle=0
                active=1
                stop_fake_activity
                backlight_off=0
                kb_brightness_restored=1
                power_backlight_ts=$now
                battery_backlight_ts=$now
                was_dimmed=0
                if [[ -n "$saved_display_brightness" && "$saved_display_brightness" -gt 0 ]]; then
                    echo "$saved_display_brightness" | sudo tee "$BRIGHTNESS_PATH" >/dev/null
                fi
            fi
            ;;
        *"Got user-triggered request to set brightness to "*)
            line=$(grep "Setting brightness to" /var/log/power_manager/powerd.LATEST | tail -n1)
            brightness_value=$(echo "$line" | sed -n 's/.*Setting brightness to \([0-9]\+\) (.*/\1/p')
    
            if [[ -n "$brightness_value" ]]; then
                saved_display_brightness="$brightness_value"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Saved current brightness: $saved_display_brightness" >> "$LOG_FILE"
            fi
            ;;
    esac
    
    if (( monitor_idle == 1 )); then
        idle_elapsed=$(( now - last_ts ))
        (( STATUS == "Discharging" )) && AUDIO_DETECTION_ENABLED=$AUDIO_DETECTION_BATTERY || AUDIO_DETECTION_ENABLED=$AUDIO_DETECTION_POWER
    
       echo "Current Timestamp -> $now | $last_ts <- Timestamp since Idle" >> "$LOG_FILE"
    
        if (( idle_elapsed >= dim_delay && idle_elapsed < backlight_delay )); then
            if (( audio_active == 1 )); then
                (( sending_fake_activity == 0 )) && start_fake_activity
            else
                if [[ $was_dimmed -eq 0 ]]; then
                    save_current_brightness
                    sleep 1
                    was_dimmed=1
                    dim_value=$((saved_display_brightness/8))
                    (( dim_value < 1 )) && dim_value=1
                    set_display_brightness "$dim_value"
                    echo "$(date '+%Y-%m-%d %H:%M:%S') - Display dimmed to $dim_value" >> "$LOG_FILE"
                fi
                (( sending_fake_activity == 0 )) && start_fake_activity
            fi
        fi
        
        if (( idle_elapsed >= backlight_delay && idle_elapsed < suspend_delay )); then
            if (( backlight_off == 0 )); then
                if [[ -n "$BRIGHTNESS_PATH" ]]; then
                    echo 0 | sudo tee "$BRIGHTNESS_PATH" >/dev/null
                fi
                backlight_off=1
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Display and keyboard backlight off." >> "$LOG_FILE"
            fi
            (( audio_active == 1 || sending_fake_activity == 0 )) && start_fake_activity
        fi

            
       if (( idle_elapsed >= suspend_delay )); then
            if (( PRESENTATION_MODE == 1 )); then
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Presentation mode active, suspend skipped." >> "$LOG_FILE"
                stop_fake_activity
            elif (( audio_active == 1 || kb_brightness_restored == 0 )); then
                (( sending_fake_activity == 0 )) && start_fake_activity
            else
                stop_fake_activity
                sleep 5
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Sleep threshold elapsed; going to sleep!" >> "$LOG_FILE"
            fi
        fi
    fi
done
stop_fake_activity
}

stop_monitoring() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            echo "Stopping SleepControl (PGID: $PID)..."
            kill -- -"$PID" 2>/dev/null
            sleep 1
            kill "$PID" 2>/dev/null
            echo "${RED}$(date '+%Y-%m-%d %H:%M:%S') - SleepControl Stopped (PID $PID)${RESET}"
        fi
    fi
    rm -f "$RUN_FLAG"
    rm -f "$PID_FILE"
    rm -f "$PID_FILE.lock"
}


case "$1" in
    start)
        exec 200>"$PID_FILE.lock"
        flock -n 200 || {
            echo "${BLUE}"
            echo "SleepControl is already running."
            echo "${RESET}"
            exit 1
        }

        if pgrep -f "$0 __sleepcontrol_monitor__" > /dev/null; then
            echo "${BLUE}$(date '+%Y-%m-%d %H:%M:%S') - SleepControl is already running. ${RESET}" | tee -a "$LOG_FILE"
            exit 0
        fi

        if [[ -n "$BRIGHTNESS_PATH" ]]; then
            current_brightness=$(cat "$BRIGHTNESS_PATH" 2>/dev/null)
            if [[ -z "$current_brightness" || "$current_brightness" -eq 0 ]]; then
                line=$(grep "Setting brightness to" /var/log/power_manager/powerd.LATEST | tail -n1)
                last_brightness=$(echo "$line" | sed -n 's/.*Setting brightness to \([0-9]\+\) (.*/\1/p')
                if [[ -n "$last_brightness" && "$last_brightness" -gt 0 ]]; then
                    echo "$last_brightness" | sudo tee "$BRIGHTNESS_PATH" >/dev/null
                fi
            fi
        fi

        stop_monitoring >/dev/null 2>&1

        if [ -f "$LOG_FILE" ] && [ "$(stat -c%s "$LOG_FILE")" -gt 131072 ]; then
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Truncated log file (exceeded 128KB)" | tee -a "$LOG_FILE"
        fi

        setsid "$0" __sleepcontrol_monitor__ >> "$LOG_FILE" 2>&1 &
        echo "${BLUE}$(date '+%Y-%m-%d %H:%M:%S') - SleepControl Started. Output is logged to $LOG_FILE${RESET}" | tee -a "$LOG_FILE"
        ;;
    stop)
        if [[ -n "$BRIGHTNESS_PATH" ]]; then
            current_brightness=$(cat "$BRIGHTNESS_PATH" 2>/dev/null)
            if [[ -z "$current_brightness" || "$current_brightness" -eq 0 ]]; then
                line=$(grep "Setting brightness to" /var/log/power_manager/powerd.LATEST | tail -n1)
                last_brightness=$(echo "$line" | sed -n 's/.*Setting brightness to \([0-9]\+\) (.*/\1/p')
                if [[ -n "$last_brightness" && "$last_brightness" -gt 0 ]]; then
                    echo "$last_brightness" | sudo tee "$BRIGHTNESS_PATH" >/dev/null
                fi
            fi
        fi

        stop_monitoring >/dev/null 2>&1
        echo "${YELLOW}$(date '+%Y-%m-%d %H:%M:%S') - SleepControl Stopped (PID $PID)${RESET}"
        ;;
    battery|power)
    MODE=$1

     if [[ "$2" == "audio" ]]; then
        set_audio_detection "$MODE" "$3"
        exit 0
        fi

    if [[ $# -eq 4 ]]; then
        DIM_VAL=$2
        BACKLIGHT_VAL=$3
        DELAY_VAL=$4

        for v in "$DIM_VAL" "$BACKLIGHT_VAL" "$DELAY_VAL"; do
            if ! [[ "$v" =~ ^[0-9]+$ && "$v" -ge 1 && "$v" -le 9999 ]]; then
                echo "${RED}Values must be integers between 1 and 9999 minutes.${RESET}"
                exit 1
            fi
        done

        if (( DIM_VAL > BACKLIGHT_VAL )); then
            echo "${RED}Dim delay cannot be greater than backlight off delay.${RESET}"
            exit 1
        fi

        if (( BACKLIGHT_VAL > DELAY_VAL )); then
            echo "${RED}Backlight off delay cannot be greater than sleep delay.${RESET}"
            exit 1
        fi

        if [[ "$MODE" == "battery" ]]; then
            BATTERY_DIM_DELAY=$DIM_VAL
            BATTERY_BACKLIGHT=$BACKLIGHT_VAL
            BATTERY_DELAY=$DELAY_VAL
        else
            POWER_DIM_DELAY=$DIM_VAL
            POWER_BACKLIGHT=$BACKLIGHT_VAL
            POWER_DELAY=$DELAY_VAL
        fi

        save_config
        echo "${BLUE}${BOLD}${MODE^}${RESET}${BLUE} = Dim: $((DIM_VAL)) min -> Timeout: $((BACKLIGHT_VAL)) min -> Sleep: $((DELAY_VAL)) min${RESET}"
        load_config

    elif [[ $# -eq 3 ]]; then
        BACKLIGHT_VAL=$2
        DELAY_VAL=$3

        if ! [[ "$BACKLIGHT_VAL" =~ ^[0-9]+$ && "$DELAY_VAL" =~ ^[0-9]+$ ]]; then
            echo "${RED}Invalid values. Usage: sleepcontrol $MODE <backlight_off_delay> <sleep_delay>${RESET}"
            exit 1
        fi

        if (( BACKLIGHT_VAL < 1 || BACKLIGHT_VAL > 9999 || DELAY_VAL < 1 || DELAY_VAL > 9999 )); then
            echo "${RED}Values must be integers between 1 and 9999 minutes.${RESET}"
            exit 1
        fi

        if (( BACKLIGHT_VAL > DELAY_VAL )); then
            echo "${RED}Backlight timeout cannot be greater than sleep delay.${RESET}"
            exit 1
        fi

        if [[ "$MODE" == "battery" ]]; then
            BATTERY_BACKLIGHT=$BACKLIGHT_VAL
            BATTERY_DELAY=$DELAY_VAL
        else
            POWER_BACKLIGHT=$BACKLIGHT_VAL
            POWER_DELAY=$DELAY_VAL
        fi

        save_config
        echo "${BLUE}${BOLD}${MODE^}${RESET}${BLUE} = Timeout: $((POWER_BACKLIGHT)) min -> Sleep: $((POWER_DELAY)) min${RESET}"
        load_config


    elif [[ $# -eq 2 ]]; then
        VAL=$2

        if ! [[ "$VAL" =~ ^[0-9]+$ && "$VAL" -ge 1 && "$VAL" -le 9999 ]]; then
            echo "${RED}Invalid value. Must be an integer between 1 and 9999.${RESET}"
            exit 1
        fi

        if [[ "$MODE" == "battery" ]]; then
            BATTERY_DELAY=$VAL
        else
            POWER_DELAY=$VAL
        fi

        save_config
        echo "${BLUE}${BOLD}${MODE^}${RESET}${BLUE} = Sleep: $((POWER_DELAY)) min${RESET}"
        load_config

    else
        load_config
        if [[ "$MODE" == "battery" ]]; then
            echo "${BLUE}Battery = Dim: $((BATTERY_DIM_DELAY)) min -> Timeout: $((BATTERY_BACKLIGHT)) min -> Sleep: $((BATTERY_DELAY)) min | Audio Detection: $AUDIO_DETECTION_BATTERY Lid Sleep: $LIDSLEEP_POWER ${RESET}"
        else
            echo "${BLUE}Power = Dim: $((POWER_DIM_DELAY)) min -> Timeout: $((POWER_BACKLIGHT)) min -> Sleep: $((POWER_DELAY)) min | Audio Detection: $AUDIO_DETECTION_POWER | Lid Sleep: $LIDSLEEP_BATTERY ${RESET}"
        fi
    fi
        ;;
        startup)
        CONF_SOURCE="$INSTALL_DIR/sleepcontrol.conf"
        CONF_TARGET="/etc/init/sleepcontrol.conf"

        read -p "Do you want SleepControl to startup automatically? (y/n): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            if [ -f "$CONF_SOURCE" ]; then
                echo "Copying sleepcontrol.conf to /etc/init/..."
                sudo cp "$CONF_SOURCE" "$CONF_TARGET"
                echo "${BLUE}sleepcontrol.conf copied.${RESET}"
            else
                echo "${RED}sleepcontrol.conf not found at $CONF_SOURCE${RESET}"
            fi
        else
            echo "SleepControl will not startup automatically."
            sudo rm -f /etc/init/sleepcontrol.conf
        fi
        ;;
        status|"")
        load_config
        if [ -f "$RUN_FLAG" ]; then
            PID=$(cat "$PID_FILE")
            if ps -p "$PID" > /dev/null 2>&1; then
echo "${BLUE}"
echo "═════════════════════════════════════════════════════════════════════════════════════════════════"
echo "                          SleepControl Status: RUNNING (PID $PID)                                  "                                 
echo ""
            else
echo "${RED}"
echo "═════════════════════════════════════════════════════════════════════════════════════════════════"
echo " SleepControl Status: RUN FLAG PRESENT, but process not yet running (120s delay on boot)"
echo ""

            fi

         else
echo "${RED}"
echo "═════════════════════════════════════════════════════════════════════════════════════════════════"
echo "                              SleepControl Status: STOPPED                                       "
        fi
echo "  Battery = Dim: $((BATTERY_DIM_DELAY)) min -> Timeout: $((BATTERY_BACKLIGHT)) min -> Sleep: $((BATTERY_DELAY)) min | Audio Detection: $AUDIO_DETECTION_BATTERY | Lid Sleep: $LIDSLEEP_BATTERY "
echo "  Power   = Dim: $((POWER_DIM_DELAY)) min -> Timeout: $((POWER_BACKLIGHT)) min -> Sleep: $((POWER_DELAY)) min | Audio Detection: $AUDIO_DETECTION_POWER | Lid Sleep: $LIDSLEEP_POWER "
echo "  Suspend Mode: ${SUSPEND_MODE}"
echo "═════════════════════════════════════════════════════════════════════════════════════════════════"
echo "${RESET}"
       
        ;;
    __sleepcontrol_monitor__)
        monitor_idle_activity
        ;;
        --h|-h|h|--help|-help|help)
            show_help
        ;;
    monitor)
        tail -f /var/log/sleepcontrol.log
        ;;
    powerd)
        tail -f /var/log/power_manager/powerd.LATEST
        ;;
    stop)
        stop_monitoring
        ;;
    mode)
        if [[ $# -eq 2 ]]; then
            SUSPEND_MODE="$2"
            if [[ "$SUSPEND_MODE" != "freeze" && "$SUSPEND_MODE" != "deep" ]]; then
                echo ""
                echo "${RED}Invalid suspend type: ${SUSPEND_MODE}${RESET}"
                echo "${BLUE}Valid suspend types: freeze or deep${RESET}"
                echo ""
                exit 1
            fi

            if [[ "$SUSPEND_MODE" == "deep" ]]; then
                for f in /var/lib/power_manager/disable_dark_resume \
                         /usr/share/power_manager/disable_dark_resume \
                         /mnt/stateful_partition/encrypted/var/lib/power_manager/disable_dark_resume; do
                    [[ -f "$f" ]] && echo 0 | sudo tee "$f" >/dev/null
                done
            fi
        
            echo "$SUSPEND_MODE" | sudo tee /usr/share/power_manager/suspend_mode >/dev/null
            sudo restart powerd >/dev/null
    
            if [[ "$SUSPEND_MODE" == "freeze" ]]; then
                echo s2idle | sudo tee /sys/power/mem_sleep >/dev/null
            else
                echo deep | sudo tee /sys/power/mem_sleep >/dev/null
            fi
    
            save_config
            echo ""
            echo "${BLUE}Suspend mode set to: $SUSPEND_MODE${RESET}"
            echo ""
        else
            echo "${BLUE}"
            echo "Valid suspend types: freeze | deep"
            echo "Current suspend mode:"
            echo ""
            echo "${RESET}${BOLD}${BLUE$}$(cat /sys/power/mem_sleep)${RESET}${BLUE}"
            echo ""
            echo "Note: freeze is s2idle - use freeze to apply correct value."
            echo "If set to deep, ChromeOS_PowerControl logic will continue to function when plugged in."
            echo "This logic is overridden on battery - with s2idle being auto-applied and then reverted when back on power."
            echo "${RESET}"
        fi
        ;;
    lidsleep | lid)
            if [[ $# -eq 3 ]]; then
                MODE=$2
                VAL=$3
    
                if [[ "$MODE" != "battery" && "$MODE" != "power" ]]; then
                    echo "${RED}Invalid mode: $MODE. Use 'battery' or 'power'.${RESET}"
                    exit 1
                fi
    
                if ! [[ "$VAL" =~ ^[0-1]$ ]]; then
                    echo "${RED}Invalid value: $VAL. Must be 0 (disabled) or 1 (enabled).${RESET}"
                    exit 1
                fi
    
                if [[ "$MODE" == "battery" ]]; then
                    LIDSLEEP_BATTERY=$VAL
                else
                    LIDSLEEP_POWER=$VAL
                fi
    
                save_config
                echo ""
                echo "${BLUE}Lid sleep for $MODE set to: $VAL${RESET}"
                echo ""
                load_config
    
            elif [[ $# -eq 1 ]]; then
                load_config
                echo "${BLUE}"
                echo "  Lid sleep settings:"
                echo "  Battery: $LIDSLEEP_BATTERY"
                echo "  Power  : $LIDSLEEP_POWER"
                echo "${RESET}"
            else
                echo ""
                echo "${RED}Usage: sleepcontrol lid battery 1${RESET}"
                echo "${RED}Usage: sleepcontrol lid power 0${RESET}"
                echo ""
                exit 1
            fi
        ;;
    *)
        show_help
        ;;
esac
